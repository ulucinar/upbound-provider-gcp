/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"

	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1"
	v1beta11 "github.com/upbound/provider-gcp/apis/secretmanager/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this DomainMapping.
func (mg *DomainMapping) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Metadata); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Metadata[i3].Namespace),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Metadata[i3].NamespaceRef,
			Selector:     mg.Spec.ForProvider.Metadata[i3].NamespaceSelector,
			To: reference.To{
				List:    &v1beta1.ProjectList{},
				Managed: &v1beta1.Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Metadata[i3].Namespace")
		}
		mg.Spec.ForProvider.Metadata[i3].Namespace = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Metadata[i3].NamespaceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Spec); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Spec[i3].RouteName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Spec[i3].RouteNameRef,
			Selector:     mg.Spec.ForProvider.Spec[i3].RouteNameSelector,
			To: reference.To{
				List:    &ServiceList{},
				Managed: &Service{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Spec[i3].RouteName")
		}
		mg.Spec.ForProvider.Spec[i3].RouteName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Spec[i3].RouteNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Metadata); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Metadata[i3].Namespace),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Metadata[i3].NamespaceRef,
			Selector:     mg.Spec.InitProvider.Metadata[i3].NamespaceSelector,
			To: reference.To{
				List:    &v1beta1.ProjectList{},
				Managed: &v1beta1.Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Metadata[i3].Namespace")
		}
		mg.Spec.InitProvider.Metadata[i3].Namespace = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Metadata[i3].NamespaceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Spec); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Spec[i3].RouteName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Spec[i3].RouteNameRef,
			Selector:     mg.Spec.InitProvider.Spec[i3].RouteNameSelector,
			To: reference.To{
				List:    &ServiceList{},
				Managed: &Service{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Spec[i3].RouteName")
		}
		mg.Spec.InitProvider.Spec[i3].RouteName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Spec[i3].RouteNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Service.
func (mg *Service) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Metadata); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Metadata[i3].Namespace),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Metadata[i3].NamespaceRef,
			Selector:     mg.Spec.ForProvider.Metadata[i3].NamespaceSelector,
			To: reference.To{
				List:    &v1beta1.ProjectList{},
				Managed: &v1beta1.Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Metadata[i3].Namespace")
		}
		mg.Spec.ForProvider.Metadata[i3].Namespace = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Metadata[i3].NamespaceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template[i3].Spec); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template[i3].Spec[i4].Containers); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom); i7++ {
						for i8 := 0; i8 < len(mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef); i8++ {
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].Name),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].NameRef,
								Selector:     mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].NameSelector,
								To: reference.To{
									List:    &v1beta11.SecretList{},
									Managed: &v1beta11.Secret{},
								},
							})
							if err != nil {
								return errors.Wrap(err, "mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].Name")
							}
							mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].Name = reference.ToPtrValue(rsp.ResolvedValue)
							mg.Spec.ForProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].NameRef = rsp.ResolvedReference

						}
					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template[i3].Spec); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template[i3].Spec[i4].Volumes); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Template[i3].Spec[i4].Volumes[i5].Secret); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretName),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretNameRef,
						Selector:     mg.Spec.ForProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretNameSelector,
						To: reference.To{
							List:    &v1beta11.SecretList{},
							Managed: &v1beta11.Secret{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretName")
					}
					mg.Spec.ForProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretName = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretNameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Metadata); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Metadata[i3].Namespace),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Metadata[i3].NamespaceRef,
			Selector:     mg.Spec.InitProvider.Metadata[i3].NamespaceSelector,
			To: reference.To{
				List:    &v1beta1.ProjectList{},
				Managed: &v1beta1.Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Metadata[i3].Namespace")
		}
		mg.Spec.InitProvider.Metadata[i3].Namespace = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Metadata[i3].NamespaceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template[i3].Spec); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template[i3].Spec[i4].Containers); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env); i6++ {
					for i7 := 0; i7 < len(mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom); i7++ {
						for i8 := 0; i8 < len(mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef); i8++ {
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].Name),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].NameRef,
								Selector:     mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].NameSelector,
								To: reference.To{
									List:    &v1beta11.SecretList{},
									Managed: &v1beta11.Secret{},
								},
							})
							if err != nil {
								return errors.Wrap(err, "mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].Name")
							}
							mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].Name = reference.ToPtrValue(rsp.ResolvedValue)
							mg.Spec.InitProvider.Template[i3].Spec[i4].Containers[i5].Env[i6].ValueFrom[i7].SecretKeyRef[i8].NameRef = rsp.ResolvedReference

						}
					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template[i3].Spec); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template[i3].Spec[i4].Volumes); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Template[i3].Spec[i4].Volumes[i5].Secret); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretName),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretNameRef,
						Selector:     mg.Spec.InitProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretNameSelector,
						To: reference.To{
							List:    &v1beta11.SecretList{},
							Managed: &v1beta11.Secret{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretName")
					}
					mg.Spec.InitProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretName = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Template[i3].Spec[i4].Volumes[i5].Secret[i6].SecretNameRef = rsp.ResolvedReference

				}
			}
		}
	}

	return nil
}

// ResolveReferences of this ServiceIAMMember.
func (mg *ServiceIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectRef,
		Selector:     mg.Spec.ForProvider.ProjectSelector,
		To: reference.To{
			List:    &v1beta1.ProjectList{},
			Managed: &v1beta1.Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Service),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceRef,
		Selector:     mg.Spec.ForProvider.ServiceSelector,
		To: reference.To{
			List:    &ServiceList{},
			Managed: &Service{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Service")
	}
	mg.Spec.ForProvider.Service = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectRef,
		Selector:     mg.Spec.InitProvider.ProjectSelector,
		To: reference.To{
			List:    &v1beta1.ProjectList{},
			Managed: &v1beta1.Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Service),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceRef,
		Selector:     mg.Spec.InitProvider.ServiceSelector,
		To: reference.To{
			List:    &ServiceList{},
			Managed: &Service{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Service")
	}
	mg.Spec.InitProvider.Service = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this V2Job.
func (mg *V2Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template[i3].Template); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template[i3].Template[i4].Containers); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource); i7++ {
						for i8 := 0; i8 < len(mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef); i8++ {
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].Secret),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].SecretRef,
								Selector:     mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].SecretSelector,
								To: reference.To{
									List:    &v1beta11.SecretList{},
									Managed: &v1beta11.Secret{},
								},
							})
							if err != nil {
								return errors.Wrap(err, "mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].Secret")
							}
							mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].Secret = reference.ToPtrValue(rsp.ResolvedValue)
							mg.Spec.ForProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].SecretRef = rsp.ResolvedReference

						}
					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template[i3].Template); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template[i3].Template[i4].Volumes); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Template[i3].Template[i4].Volumes[i5].Secret); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].Secret),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].SecretRef,
						Selector:     mg.Spec.ForProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].SecretSelector,
						To: reference.To{
							List:    &v1beta11.SecretList{},
							Managed: &v1beta11.Secret{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].Secret")
					}
					mg.Spec.ForProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].Secret = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].SecretRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template[i3].Template); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template[i3].Template[i4].Containers); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env); i6++ {
					for i7 := 0; i7 < len(mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource); i7++ {
						for i8 := 0; i8 < len(mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef); i8++ {
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].Secret),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].SecretRef,
								Selector:     mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].SecretSelector,
								To: reference.To{
									List:    &v1beta11.SecretList{},
									Managed: &v1beta11.Secret{},
								},
							})
							if err != nil {
								return errors.Wrap(err, "mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].Secret")
							}
							mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].Secret = reference.ToPtrValue(rsp.ResolvedValue)
							mg.Spec.InitProvider.Template[i3].Template[i4].Containers[i5].Env[i6].ValueSource[i7].SecretKeyRef[i8].SecretRef = rsp.ResolvedReference

						}
					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template[i3].Template); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template[i3].Template[i4].Volumes); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Template[i3].Template[i4].Volumes[i5].Secret); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].Secret),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].SecretRef,
						Selector:     mg.Spec.InitProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].SecretSelector,
						To: reference.To{
							List:    &v1beta11.SecretList{},
							Managed: &v1beta11.Secret{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].Secret")
					}
					mg.Spec.InitProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].Secret = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Template[i3].Template[i4].Volumes[i5].Secret[i6].SecretRef = rsp.ResolvedReference

				}
			}
		}
	}

	return nil
}

// ResolveReferences of this V2Service.
func (mg *V2Service) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template[i3].Containers); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template[i3].Containers[i4].Env); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Template[i3].Containers[i4].Env[i5].ValueSource); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef); i7++ {
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].Secret),
							Extract:      reference.ExternalName(),
							Reference:    mg.Spec.ForProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].SecretRef,
							Selector:     mg.Spec.ForProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].SecretSelector,
							To: reference.To{
								List:    &v1beta11.SecretList{},
								Managed: &v1beta11.Secret{},
							},
						})
						if err != nil {
							return errors.Wrap(err, "mg.Spec.ForProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].Secret")
						}
						mg.Spec.ForProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].Secret = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.ForProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].SecretRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template[i3].Volumes); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template[i3].Volumes[i4].Secret); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template[i3].Volumes[i4].Secret[i5].Secret),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Template[i3].Volumes[i4].Secret[i5].SecretRef,
					Selector:     mg.Spec.ForProvider.Template[i3].Volumes[i4].Secret[i5].SecretSelector,
					To: reference.To{
						List:    &v1beta11.SecretList{},
						Managed: &v1beta11.Secret{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Template[i3].Volumes[i4].Secret[i5].Secret")
				}
				mg.Spec.ForProvider.Template[i3].Volumes[i4].Secret[i5].Secret = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Template[i3].Volumes[i4].Secret[i5].SecretRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template[i3].Containers); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template[i3].Containers[i4].Env); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Template[i3].Containers[i4].Env[i5].ValueSource); i6++ {
					for i7 := 0; i7 < len(mg.Spec.InitProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef); i7++ {
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].Secret),
							Extract:      reference.ExternalName(),
							Reference:    mg.Spec.InitProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].SecretRef,
							Selector:     mg.Spec.InitProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].SecretSelector,
							To: reference.To{
								List:    &v1beta11.SecretList{},
								Managed: &v1beta11.Secret{},
							},
						})
						if err != nil {
							return errors.Wrap(err, "mg.Spec.InitProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].Secret")
						}
						mg.Spec.InitProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].Secret = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.InitProvider.Template[i3].Containers[i4].Env[i5].ValueSource[i6].SecretKeyRef[i7].SecretRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Template); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template[i3].Volumes); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template[i3].Volumes[i4].Secret); i5++ {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template[i3].Volumes[i4].Secret[i5].Secret),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Template[i3].Volumes[i4].Secret[i5].SecretRef,
					Selector:     mg.Spec.InitProvider.Template[i3].Volumes[i4].Secret[i5].SecretSelector,
					To: reference.To{
						List:    &v1beta11.SecretList{},
						Managed: &v1beta11.Secret{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Template[i3].Volumes[i4].Secret[i5].Secret")
				}
				mg.Spec.InitProvider.Template[i3].Volumes[i4].Secret[i5].Secret = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Template[i3].Volumes[i4].Secret[i5].SecretRef = rsp.ResolvedReference

			}
		}
	}

	return nil
}
