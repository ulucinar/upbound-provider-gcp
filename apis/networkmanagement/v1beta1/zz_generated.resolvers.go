//go:build (networkmanagement || all) && !ignore_autogenerated

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-gcp/apis/compute/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ConnectivityTest.
func (mg *ConnectivityTest) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination[i3].IPAddress),
			Extract:      resource.ExtractParamPath("address", false),
			Reference:    mg.Spec.ForProvider.Destination[i3].IPAddressRef,
			Selector:     mg.Spec.ForProvider.Destination[i3].IPAddressSelector,
			To: reference.To{
				List:    &v1beta1.AddressList{},
				Managed: &v1beta1.Address{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination[i3].IPAddress")
		}
		mg.Spec.ForProvider.Destination[i3].IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination[i3].IPAddressRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination[i3].Instance),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Destination[i3].InstanceRef,
			Selector:     mg.Spec.ForProvider.Destination[i3].InstanceSelector,
			To: reference.To{
				List:    &v1beta1.InstanceList{},
				Managed: &v1beta1.Instance{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination[i3].Instance")
		}
		mg.Spec.ForProvider.Destination[i3].Instance = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination[i3].InstanceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination[i3].Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Destination[i3].NetworkRef,
			Selector:     mg.Spec.ForProvider.Destination[i3].NetworkSelector,
			To: reference.To{
				List:    &v1beta1.NetworkList{},
				Managed: &v1beta1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination[i3].Network")
		}
		mg.Spec.ForProvider.Destination[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination[i3].ProjectID),
			Extract:      resource.ExtractParamPath("project", false),
			Reference:    mg.Spec.ForProvider.Destination[i3].ProjectIDRef,
			Selector:     mg.Spec.ForProvider.Destination[i3].ProjectIDSelector,
			To: reference.To{
				List:    &v1beta1.AddressList{},
				Managed: &v1beta1.Address{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination[i3].ProjectID")
		}
		mg.Spec.ForProvider.Destination[i3].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination[i3].ProjectIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].IPAddress),
			Extract:      resource.ExtractParamPath("address", false),
			Reference:    mg.Spec.ForProvider.Source[i3].IPAddressRef,
			Selector:     mg.Spec.ForProvider.Source[i3].IPAddressSelector,
			To: reference.To{
				List:    &v1beta1.AddressList{},
				Managed: &v1beta1.Address{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].IPAddress")
		}
		mg.Spec.ForProvider.Source[i3].IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source[i3].IPAddressRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].Instance),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Source[i3].InstanceRef,
			Selector:     mg.Spec.ForProvider.Source[i3].InstanceSelector,
			To: reference.To{
				List:    &v1beta1.InstanceList{},
				Managed: &v1beta1.Instance{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].Instance")
		}
		mg.Spec.ForProvider.Source[i3].Instance = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source[i3].InstanceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Source[i3].NetworkRef,
			Selector:     mg.Spec.ForProvider.Source[i3].NetworkSelector,
			To: reference.To{
				List:    &v1beta1.NetworkList{},
				Managed: &v1beta1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].Network")
		}
		mg.Spec.ForProvider.Source[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].ProjectID),
			Extract:      resource.ExtractParamPath("project", false),
			Reference:    mg.Spec.ForProvider.Source[i3].ProjectIDRef,
			Selector:     mg.Spec.ForProvider.Source[i3].ProjectIDSelector,
			To: reference.To{
				List:    &v1beta1.AddressList{},
				Managed: &v1beta1.Address{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].ProjectID")
		}
		mg.Spec.ForProvider.Source[i3].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source[i3].ProjectIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination[i3].IPAddress),
			Extract:      resource.ExtractParamPath("address", false),
			Reference:    mg.Spec.InitProvider.Destination[i3].IPAddressRef,
			Selector:     mg.Spec.InitProvider.Destination[i3].IPAddressSelector,
			To: reference.To{
				List:    &v1beta1.AddressList{},
				Managed: &v1beta1.Address{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination[i3].IPAddress")
		}
		mg.Spec.InitProvider.Destination[i3].IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination[i3].IPAddressRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination[i3].Instance),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Destination[i3].InstanceRef,
			Selector:     mg.Spec.InitProvider.Destination[i3].InstanceSelector,
			To: reference.To{
				List:    &v1beta1.InstanceList{},
				Managed: &v1beta1.Instance{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination[i3].Instance")
		}
		mg.Spec.InitProvider.Destination[i3].Instance = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination[i3].InstanceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination[i3].Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Destination[i3].NetworkRef,
			Selector:     mg.Spec.InitProvider.Destination[i3].NetworkSelector,
			To: reference.To{
				List:    &v1beta1.NetworkList{},
				Managed: &v1beta1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination[i3].Network")
		}
		mg.Spec.InitProvider.Destination[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination[i3].ProjectID),
			Extract:      resource.ExtractParamPath("project", false),
			Reference:    mg.Spec.InitProvider.Destination[i3].ProjectIDRef,
			Selector:     mg.Spec.InitProvider.Destination[i3].ProjectIDSelector,
			To: reference.To{
				List:    &v1beta1.AddressList{},
				Managed: &v1beta1.Address{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination[i3].ProjectID")
		}
		mg.Spec.InitProvider.Destination[i3].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination[i3].ProjectIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source[i3].IPAddress),
			Extract:      resource.ExtractParamPath("address", false),
			Reference:    mg.Spec.InitProvider.Source[i3].IPAddressRef,
			Selector:     mg.Spec.InitProvider.Source[i3].IPAddressSelector,
			To: reference.To{
				List:    &v1beta1.AddressList{},
				Managed: &v1beta1.Address{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source[i3].IPAddress")
		}
		mg.Spec.InitProvider.Source[i3].IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source[i3].IPAddressRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source[i3].Instance),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Source[i3].InstanceRef,
			Selector:     mg.Spec.InitProvider.Source[i3].InstanceSelector,
			To: reference.To{
				List:    &v1beta1.InstanceList{},
				Managed: &v1beta1.Instance{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source[i3].Instance")
		}
		mg.Spec.InitProvider.Source[i3].Instance = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source[i3].InstanceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source[i3].Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Source[i3].NetworkRef,
			Selector:     mg.Spec.InitProvider.Source[i3].NetworkSelector,
			To: reference.To{
				List:    &v1beta1.NetworkList{},
				Managed: &v1beta1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source[i3].Network")
		}
		mg.Spec.InitProvider.Source[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Source); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source[i3].ProjectID),
			Extract:      resource.ExtractParamPath("project", false),
			Reference:    mg.Spec.InitProvider.Source[i3].ProjectIDRef,
			Selector:     mg.Spec.InitProvider.Source[i3].ProjectIDSelector,
			To: reference.To{
				List:    &v1beta1.AddressList{},
				Managed: &v1beta1.Address{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source[i3].ProjectID")
		}
		mg.Spec.InitProvider.Source[i3].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source[i3].ProjectIDRef = rsp.ResolvedReference

	}

	return nil
}
