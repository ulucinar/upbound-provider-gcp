//go:build (dns || all) && !ignore_autogenerated

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-gcp/apis/compute/v1beta1"
	v1beta11 "github.com/upbound/provider-gcp/apis/container/v1beta1"
	common "github.com/upbound/provider-gcp/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ManagedZone.
func (mg *ManagedZone) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PeeringConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PeeringConfig[i3].TargetNetwork); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURL),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.ForProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURLRef,
				Selector:     mg.Spec.ForProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURLSelector,
				To: reference.To{
					List:    &v1beta1.NetworkList{},
					Managed: &v1beta1.Network{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURL")
			}
			mg.Spec.ForProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURLRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PrivateVisibilityConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PrivateVisibilityConfig[i3].GkeClusters); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterName),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterNameRef,
				Selector:     mg.Spec.ForProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterNameSelector,
				To: reference.To{
					List:    &v1beta11.ClusterList{},
					Managed: &v1beta11.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterName")
			}
			mg.Spec.ForProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterNameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PrivateVisibilityConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PrivateVisibilityConfig[i3].Networks); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURL),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.ForProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURLRef,
				Selector:     mg.Spec.ForProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURLSelector,
				To: reference.To{
					List:    &v1beta1.NetworkList{},
					Managed: &v1beta1.Network{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURL")
			}
			mg.Spec.ForProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURLRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PeeringConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PeeringConfig[i3].TargetNetwork); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURL),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.InitProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURLRef,
				Selector:     mg.Spec.InitProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURLSelector,
				To: reference.To{
					List:    &v1beta1.NetworkList{},
					Managed: &v1beta1.Network{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURL")
			}
			mg.Spec.InitProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PeeringConfig[i3].TargetNetwork[i4].NetworkURLRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PrivateVisibilityConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PrivateVisibilityConfig[i3].GkeClusters); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterName),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterNameRef,
				Selector:     mg.Spec.InitProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterNameSelector,
				To: reference.To{
					List:    &v1beta11.ClusterList{},
					Managed: &v1beta11.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterName")
			}
			mg.Spec.InitProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PrivateVisibilityConfig[i3].GkeClusters[i4].GkeClusterNameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PrivateVisibilityConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PrivateVisibilityConfig[i3].Networks); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURL),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.InitProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURLRef,
				Selector:     mg.Spec.InitProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURLSelector,
				To: reference.To{
					List:    &v1beta1.NetworkList{},
					Managed: &v1beta1.Network{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURL")
			}
			mg.Spec.InitProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PrivateVisibilityConfig[i3].Networks[i4].NetworkURLRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Policy.
func (mg *Policy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Networks); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Networks[i3].NetworkURL),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Networks[i3].NetworkRef,
			Selector:     mg.Spec.ForProvider.Networks[i3].NetworkSelector,
			To: reference.To{
				List:    &v1beta1.NetworkList{},
				Managed: &v1beta1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Networks[i3].NetworkURL")
		}
		mg.Spec.ForProvider.Networks[i3].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Networks[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Networks); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Networks[i3].NetworkURL),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Networks[i3].NetworkRef,
			Selector:     mg.Spec.InitProvider.Networks[i3].NetworkSelector,
			To: reference.To{
				List:    &v1beta1.NetworkList{},
				Managed: &v1beta1.Network{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Networks[i3].NetworkURL")
		}
		mg.Spec.InitProvider.Networks[i3].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Networks[i3].NetworkRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RecordSet.
func (mg *RecordSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ManagedZone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ManagedZoneRef,
		Selector:     mg.Spec.ForProvider.ManagedZoneSelector,
		To: reference.To{
			List:    &ManagedZoneList{},
			Managed: &ManagedZone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagedZone")
	}
	mg.Spec.ForProvider.ManagedZone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagedZoneRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RoutingPolicy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddress),
						Extract:      resource.ExtractParamPath("ip_address", false),
						Reference:    mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddressRef,
						Selector:     mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddressSelector,
						To: reference.To{
							List:    &v1beta1.ForwardingRuleList{},
							Managed: &v1beta1.ForwardingRule{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddress")
					}
					mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddressRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RoutingPolicy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURL),
						Extract:      resource.ExtractResourceID(),
						Reference:    mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURLRef,
						Selector:     mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURLSelector,
						To: reference.To{
							List:    &v1beta1.NetworkList{},
							Managed: &v1beta1.Network{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURL")
					}
					mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURLRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RoutingPolicy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Project),
						Extract:      resource.ExtractParamPath("project", false),
						Reference:    mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].ProjectRef,
						Selector:     mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].ProjectSelector,
						To: reference.To{
							List:    &v1beta1.ForwardingRuleList{},
							Managed: &v1beta1.ForwardingRule{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Project")
					}
					mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Project = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].ProjectRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.RoutingPolicy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Region),
						Extract:      resource.ExtractParamPath("region", false),
						Reference:    mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].RegionRef,
						Selector:     mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].RegionSelector,
						To: reference.To{
							List:    &v1beta1.ForwardingRuleList{},
							Managed: &v1beta1.ForwardingRule{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Region")
					}
					mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Region = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].RegionRef = rsp.ResolvedReference

				}
			}
		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ManagedZone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ManagedZoneRef,
		Selector:     mg.Spec.InitProvider.ManagedZoneSelector,
		To: reference.To{
			List:    &ManagedZoneList{},
			Managed: &ManagedZone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ManagedZone")
	}
	mg.Spec.InitProvider.ManagedZone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ManagedZoneRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.RoutingPolicy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddress),
						Extract:      resource.ExtractParamPath("ip_address", false),
						Reference:    mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddressRef,
						Selector:     mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddressSelector,
						To: reference.To{
							List:    &v1beta1.ForwardingRuleList{},
							Managed: &v1beta1.ForwardingRule{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddress")
					}
					mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].IPAddressRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RoutingPolicy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURL),
						Extract:      resource.ExtractResourceID(),
						Reference:    mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURLRef,
						Selector:     mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURLSelector,
						To: reference.To{
							List:    &v1beta1.NetworkList{},
							Managed: &v1beta1.Network{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURL")
					}
					mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].NetworkURLRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RoutingPolicy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Project),
						Extract:      resource.ExtractParamPath("project", false),
						Reference:    mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].ProjectRef,
						Selector:     mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].ProjectSelector,
						To: reference.To{
							List:    &v1beta1.ForwardingRuleList{},
							Managed: &v1beta1.ForwardingRule{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Project")
					}
					mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Project = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].ProjectRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RoutingPolicy); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Region),
						Extract:      resource.ExtractParamPath("region", false),
						Reference:    mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].RegionRef,
						Selector:     mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].RegionSelector,
						To: reference.To{
							List:    &v1beta1.ForwardingRuleList{},
							Managed: &v1beta1.ForwardingRule{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Region")
					}
					mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].Region = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.RoutingPolicy[i3].PrimaryBackup[i4].Primary[i5].InternalLoadBalancers[i6].RegionRef = rsp.ResolvedReference

				}
			}
		}
	}

	return nil
}
