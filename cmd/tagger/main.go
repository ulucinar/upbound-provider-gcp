//go:build generate

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

// addOrUpdateBuildTag traverses directories from the parent, updating or adding build tags in Go files.
// The behavior changes based on fileMode: when true, it matches pathRegex against only the filename for tags.
func addOrUpdateBuildTag(parent string, pathRegex string, tagFormat string, fileMode bool) error {
	re, err := regexp.Compile(pathRegex)
	if err != nil {
		return fmt.Errorf("invalid regular expression: %w", err)
	}

	return filepath.Walk(parent, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() && strings.HasSuffix(path, ".go") {
			var matchString string
			if fileMode {
				matchString = filepath.Base(path) // Get the filename only for regex match
			} else {
				matchString, err = filepath.Rel(parent, path) // Get the relative path for regex match
				if err != nil {
					return fmt.Errorf("error determining relative path: %w", err)
				}
			}

			matches := re.FindStringSubmatch(matchString)
			if len(matches) == 2 { // Assumes the regex has one group for the build tag
				newBuildTag := fmt.Sprintf(tagFormat, matches[1])

				err = updateFileWithBuildTag(path, newBuildTag)
				if err != nil {
					return fmt.Errorf("error updating file %s: %w", path, err)
				}
			}
		}
		return nil
	})
}

// updateFileWithBuildTag reads a Go file and updates or inserts the specified build tag.
func updateFileWithBuildTag(filePath, buildTag string) error {
	content, err := os.ReadFile(filePath)
	if err != nil {
		return err
	}

	lines := strings.Split(string(content), "\n")
	updatedLines := make([]string, 0, len(lines))

	// Determine if the file already contains a build tag and replace it; otherwise, prepend
	foundBuildTag := false
	for _, line := range lines {
		if strings.HasPrefix(line, "//go:build") {
			if !foundBuildTag {
				updatedLines = append(updatedLines, buildTag)
				foundBuildTag = true
			}
		} else {
			updatedLines = append(updatedLines, line)
		}
	}

	if !foundBuildTag {
		updatedLines = append([]string{buildTag, ""}, updatedLines...)
	}

	// Write the updated content back to the file
	return os.WriteFile(filePath, []byte(strings.Join(updatedLines, "\n")), 0644)
}

func main() {
	// Example usage
	err := addOrUpdateBuildTag("/Users/alper/data/workspaces/github.com/ulucinar/upbound/provider-gcp/apis", `(.+)/.+/zz_groupversion_info\.go`, `//go:build (%s || register || all) && !ignore_autogenerated`, false)
	if err != nil {
		fmt.Printf("An error occurred: %s\n", err)
	}
}
